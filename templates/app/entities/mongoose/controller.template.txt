const { GenericControllers } = require("kainda");

async function __create%%$MODEL_NAME_UPPERCASE$%%(container, transaction, options) {
    return await GenericControllers.__genericCreate(Models.%%$MODEL_NAME_UPPERCASE$%%, container, transaction, options);
}

async function __getAll%%$MODEL_NAME_UPPERCASE$%%s(transaction) {
    return await GenericControllers.__genericGetAll(Models.%%$MODEL_NAME_UPPERCASE$%%, transaction);
}

async function __get%%$MODEL_NAME_UPPERCASE$%%(id, transaction) {
    return await GenericControllers.__genericGet(Models.%%$MODEL_NAME_UPPERCASE$%%, id, transaction);
}

async function __update%%$MODEL_NAME_UPPERCASE$%%(container, transaction, options) {
    return await GenericControllers.__genericUpdate(Models.%%$MODEL_NAME_UPPERCASE$%%, container, transaction, options);
}

async function __delete%%$MODEL_NAME_UPPERCASE$%%(container, transaction) {
    return await GenericControllers.__genericDelete(Models.%%$MODEL_NAME_UPPERCASE$%%, container, transaction);
}

async function create%%$MODEL_NAME_UPPERCASE$%%(req, res) {
    let transaction = await mongoose.startSession();
    try {
        transaction.startTransaction();
        const %%$MODEL_NAME_LOWERCASE$%% = await __create%%$MODEL_NAME_UPPERCASE$%%(req.body, transaction);
        await transaction.commitTransaction();
        return res.status(201).json(%%$MODEL_NAME_LOWERCASE$%%.toJSON());
    } catch (error) {
        if(transaction) {
            await transaction.abortTransaction();
        }
        ExceptionHandler(error, res);
    }
}

async function getAll%%$MODEL_NAME_UPPERCASE$%%s(req, res) {
    try {
        const %%$MODEL_NAME_LOWERCASE$%%s = await __getAll%%$MODEL_NAME_UPPERCASE$%%s();
        if(!%%$MODEL_NAME_LOWERCASE$%%s || %%$MODEL_NAME_LOWERCASE$%%s.length === 0){
            throw new Models.%%$MODEL_NAME_UPPERCASE$%%.Exceptions.%%$MODEL_NAME_UPPERCASE$%%NotFoundException({
                error_type: "NOT_FOUND",
                error_message: "Currently, there are no %%$MODEL_NAME_LOWERCASE$%%s in the database.",
                error_data: {
                    req: req.body
                }
            })
        }
        return res.status(200).json(%%$MODEL_NAME_LOWERCASE$%%s.map(
            (%%$MODEL_NAME_LOWERCASE$%%) => %%$MODEL_NAME_LOWERCASE$%%.toJSON()
        ));
    } catch (error) {
        ExceptionHandler(error, res);
    }
}

async function get%%$MODEL_NAME_UPPERCASE$%%(req, res) {
    try {
        const %%$MODEL_NAME_LOWERCASE$%% = await __get%%$MODEL_NAME_UPPERCASE$%%(req.params.%%$MODEL_NAME_LOWERCASE$%%_id);
        if(!%%$MODEL_NAME_LOWERCASE$%%) {
            throw new Models.%%$MODEL_NAME_UPPERCASE$%%.Exceptions.%%$MODEL_NAME_UPPERCASE$%%NotFoundException({
                error_type: "NOT_FOUND",
                error_message: req.params.%%$MODEL_NAME_LOWERCASE$%%_id + " not found",
                error_data: {
                    req: req.body
                }
            })
        }
        return res.status(200).json(%%$MODEL_NAME_LOWERCASE$%%.toJSON());
    } catch (error) {
        ExceptionHandler(error, res);
    }
}

async function update%%$MODEL_NAME_UPPERCASE$%%(req, res) {
    let transaction = await mongoose.startSession();
    try {
        transaction.startTransaction();
        let container = { ...req.body, %%$MODEL_NAME_LOWERCASE$%%_id: req.params.%%$MODEL_NAME_LOWERCASE$%%_id };
        const %%$MODEL_NAME_LOWERCASE$%% = await __update%%$MODEL_NAME_UPPERCASE$%%(container, transaction);
        await transaction.commitTransaction();
        return res.status(200).json(%%$MODEL_NAME_LOWERCASE$%%.toJSON()); 
    } catch (error) {
        if(transaction) {
            await transaction.abortTransaction();
        }
        ExceptionHandler(error, res);
    }
}

async function delete%%$MODEL_NAME_UPPERCASE$%%(req, res) {
    let transaction = await mongoose.startSession();
    try {
        transaction.startTransaction();
        const %%$MODEL_NAME_LOWERCASE$%% = await __delete%%$MODEL_NAME_UPPERCASE$%%(req.params.%%$MODEL_NAME_LOWERCASE$%%_id ?? req.body.%%$MODEL_NAME_LOWERCASE$%%_id, transaction);
        await transaction.commitTransaction();
        return res.status(200).json(%%$MODEL_NAME_LOWERCASE$%%.toJSON()); 
    } catch (error) {
        if(transaction) {
            await transaction.abortTransaction();
        }
        ExceptionHandler(error, res);
    }
}

module.exports = {
    __create%%$MODEL_NAME_UPPERCASE$%%,
    __getAll%%$MODEL_NAME_UPPERCASE$%%s,
    __get%%$MODEL_NAME_UPPERCASE$%%,
    __update%%$MODEL_NAME_UPPERCASE$%%,
    __delete%%$MODEL_NAME_UPPERCASE$%%,
    create%%$MODEL_NAME_UPPERCASE$%%,
    getAll%%$MODEL_NAME_UPPERCASE$%%s,
    get%%$MODEL_NAME_UPPERCASE$%%,
    update%%$MODEL_NAME_UPPERCASE$%%,
    delete%%$MODEL_NAME_UPPERCASE$%%
}